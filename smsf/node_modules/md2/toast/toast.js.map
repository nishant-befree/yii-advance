{"version":3,"file":"toast.js","sourceRoot":"","sources":["../../../src/lib/toast/toast.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACL,SAAS,EACT,UAAU,EAEV,iBAAiB,GAClB,MAAM,eAAe,CAAC;AACvB,OAAO,EACL,OAAO,EACP,YAAY,EAEZ,eAAe,GAChB,MAAM,SAAS,CAAC;AAEjB;IAGE,eAAmB,OAAe;QAAf,YAAO,GAAP,OAAO,CAAQ;IAAI,CAAC;IACzC,YAAC;AAAD,CAAC,AAJD,IAIC;;AAED;IAAA;QACE,aAAQ,GAAW,IAAI,CAAC;QACxB,qBAAgB,GAAsB,IAAI,CAAC;IAC7C,CAAC;IAAD,qBAAC;AAAD,CAAC,AAHD,IAGC;;AAGD,IAAa,QAAQ;IAMnB,kBAAoB,QAAiB,EAAU,OAAuB;QAAlD,aAAQ,GAAR,QAAQ,CAAS;QAAU,YAAO,GAAP,OAAO,CAAgB;QAL9D,UAAK,GAAW,CAAC,CAAC;IAKgD,CAAC;IAE3E;;;OAGG;IACH,wBAAK,GAAL,UAAM,OAAe,EAAE,QAAiB;QACtC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IAC/B,CAAC;IAED;;;OAGG;IACH,uBAAI,GAAJ,UAAK,OAAe,EAAE,QAAiB;QACrC,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YAAC,MAAM,CAAC;QAAC,CAAC;QAE5C,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAAC,CAAC;QAEnD,IAAI,KAAY,CAAC;QACjB,KAAK,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;QAE3B,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACV,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;gBACzB,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,CAAC;YAED,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAC/B,CAAC;IACH,CAAC;IAED,kCAAkC;IAC1B,+BAAY,GAApB;QACE,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,IAAI,MAAM,GAAG,IAAI,eAAe,CAAC,iBAAiB,EAAE,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;QACnF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC;IACjE,CAAC;IAED,sDAAsD;IAC9C,iCAAc,GAAtB;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACtB,IAAI,MAAM,GAAG,IAAI,YAAY,EAAE,CAAC;YAChC,MAAM,CAAC,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;iBAC/C,MAAM,EAAE;iBACR,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAEvB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAClD,CAAC;IACH,CAAC;IAED,mEAAmE;IAC3D,gCAAa,GAArB;QACE,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;QAC3B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;IAC7B,CAAC;IAED,gGAAgG;IACxF,mCAAgB,GAAxB,UAAyB,KAAY;QAArC,iBAMC;QALC,KAAK,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC;QACxB,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACpC,UAAU,CAAC;YACT,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAC5B,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC5B,CAAC;IAED;;;OAGG;IACK,6BAAU,GAAlB,UAAmB,OAAe;QAAlC,iBAQC;QAPC,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YACzC,UAAU,CAAC;gBACT,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;oBAAC,KAAI,CAAC,aAAa,EAAE,CAAC;gBAAC,CAAC;YAChE,CAAC,EAAE,GAAG,CAAC,CAAC;QAEV,CAAC;IACH,CAAC;IAED;;OAEG;IACH,iCAAc,GAAd;QAAA,iBAQC;QAPC,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,cAAc,CAAC,eAAe,EAAE,CAAC;YACtC,UAAU,CAAC;gBACT,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;oBAAC,KAAI,CAAC,aAAa,EAAE,CAAC;gBAAC,CAAC;YAChE,CAAC,EAAE,GAAG,CAAC,CAAC;QAEV,CAAC;IACH,CAAC;IAEH,eAAC;AAAD,CAAC,AAnGD,IAmGC;AAnGY,QAAQ;IADpB,UAAU,EAAE;qCAOmB,OAAO,EAAmB,cAAc;GAN3D,QAAQ,CAmGpB;SAnGY,QAAQ;AA2GrB,IAAa,iBAAiB;IAN9B;QAOE,WAAM,GAAY,EAAE,CAAC;QACrB,aAAQ,GAAG,CAAC,CAAC;IA+Cf,CAAC;IA7CC;;;OAGG;IACH,oCAAQ,GAAR,UAAS,KAAY;QAArB,iBAWC;QAVC,UAAU,CAAC;YACT,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC;QACzB,CAAC,EAAE,CAAC,CAAC,CAAC;QACN,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACvC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,KAAK,CAAC;YACjC,UAAU,CAAC;gBACT,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAI,CAAC,MAAM,CAAC,MAAM,GAAG,KAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC9D,CAAC,EAAE,GAAG,CAAC,CAAC;QACV,CAAC;IACH,CAAC;IAED;;;OAGG;IACH,uCAAW,GAAX,UAAY,OAAe;QAA3B,iBAKC;QAJC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,CAAM,IAAO,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,OAAO,CAAC,CAAC,CAAC;YAAC,CAAC,CAAC,SAAS,GAAG,KAAK,CAAC;QAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACpF,UAAU,CAAC;YACT,KAAI,CAAC,MAAM,GAAG,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,UAAC,KAAK,IAAO,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAChF,CAAC,EAAE,GAAG,CAAC,CAAC;IACV,CAAC;IAED;;;OAGG;IACH,2CAAe,GAAf;QAAA,iBAKC;QAJC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,CAAM,IAAO,CAAC,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1D,UAAU,CAAC;YACT,KAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACnB,CAAC,EAAE,GAAG,CAAC,CAAC;IACV,CAAC;IAED;;;OAGG;IACH,oCAAQ,GAAR,cAAsB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;IAExD,wBAAC;AAAD,CAAC,AAjDD,IAiDC;AAjDY,iBAAiB;IAN7B,SAAS,CAAC;QACT,QAAQ,EAAE,WAAW;QACrB,WAAW,EAAE,YAAY;QACzB,SAAS,EAAE,CAAC,WAAW,CAAC;QACxB,aAAa,EAAE,iBAAiB,CAAC,IAAI;KACtC,CAAC;GACW,iBAAiB,CAiD7B;SAjDY,iBAAiB","sourcesContent":["import {\n  Component,\n  Injectable,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  Overlay,\n  OverlayState,\n  OverlayRef,\n  ComponentPortal,\n} from '../core';\n\nexport class Toast {\n  id: number;\n  isVisible: boolean;\n  constructor(public message: string) { }\n}\n\nexport class Md2ToastConfig {\n  duration: number = 3000;\n  viewContainerRef?: ViewContainerRef = null;\n}\n\n@Injectable()\nexport class Md2Toast {\n  private index: number = 0;\n\n  _overlayRef: OverlayRef;\n  _toastInstance: Md2ToastComponent;\n\n  constructor(private _overlay: Overlay, private _config: Md2ToastConfig) { }\n\n  /**\n   * toast message\n   * @param toast string or object with message and other properties of toast\n   */\n  toast(message: string, duration?: number) {\n    this.show(message, duration);\n  }\n\n  /**\n   * show toast\n   * @param toastObj string or object with message and other properties of toast\n   */\n  show(message: string, duration?: number) {\n    if (!message || !message.trim()) { return; }\n\n    if (duration) { this._config.duration = duration; }\n\n    let toast: Toast;\n    toast = new Toast(message);\n\n    if (toast) {\n      if (!this._toastInstance) {\n        this._createToast();\n      }\n\n      this._setToastMessage(toast);\n    }\n  }\n\n  /** Create the toast to display */\n  private _createToast(): void {\n    this._createOverlay();\n    let portal = new ComponentPortal(Md2ToastComponent, this._config.viewContainerRef);\n    this._toastInstance = this._overlayRef.attach(portal).instance;\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): void {\n    if (!this._overlayRef) {\n      let config = new OverlayState();\n      config.positionStrategy = this._overlay.position()\n        .global()\n        .top('0').right('0');\n\n      this._overlayRef = this._overlay.create(config);\n    }\n  }\n\n  /** Disposes the current toast and the overlay it is attached to */\n  private _disposeToast(): void {\n    this._overlayRef.dispose();\n    this._overlayRef = null;\n    this._toastInstance = null;\n  }\n\n  /** Updates the toast message and repositions the overlay according to the new message length */\n  private _setToastMessage(toast: Toast) {\n    toast.id = ++this.index;\n    this._toastInstance.addToast(toast);\n    setTimeout(() => {\n      this.clearToast(toast.id);\n    }, this._config.duration);\n  }\n\n  /**\n   * clear specific toast\n   * @param toastId\n   */\n  private clearToast(toastId: number) {\n    if (this._toastInstance) {\n      this._toastInstance.removeToast(toastId);\n      setTimeout(() => {\n        if (!this._toastInstance.hasToast()) { this._disposeToast(); }\n      }, 250);\n\n    }\n  }\n\n  /**\n   * clear all toasts\n   */\n  clearAllToasts() {\n    if (this._toastInstance) {\n      this._toastInstance.removeAllToasts();\n      setTimeout(() => {\n        if (!this._toastInstance.hasToast()) { this._disposeToast(); }\n      }, 250);\n\n    }\n  }\n\n}\n\n@Component({\n  selector: 'md2-toast',\n  templateUrl: 'toast.html',\n  styleUrls: ['toast.css'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class Md2ToastComponent {\n  toasts: Toast[] = [];\n  maxShown = 5;\n\n  /**\n   * add toast\n   * @param toast toast object with all parameters\n   */\n  addToast(toast: Toast) {\n    setTimeout(() => {\n      toast.isVisible = true;\n    }, 1);\n    this.toasts.push(toast);\n    if (this.toasts.length > this.maxShown) {\n      this.toasts[0].isVisible = false;\n      setTimeout(() => {\n        this.toasts.splice(0, (this.toasts.length - this.maxShown));\n      }, 250);\n    }\n  }\n\n  /**\n   * remove toast\n   * @param toastId number of toast id\n   */\n  removeToast(toastId: number) {\n    this.toasts.forEach((t: any) => { if (t.id === toastId) { t.isVisible = false; } });\n    setTimeout(() => {\n      this.toasts = this.toasts.filter((toast) => { return toast.id !== toastId; });\n    }, 250);\n  }\n\n  /**\n   * remove all toasts\n   * @param toastId number of toast id\n   */\n  removeAllToasts() {\n    this.toasts.forEach((t: any) => { t.isVisible = false; });\n    setTimeout(() => {\n      this.toasts = [];\n    }, 250);\n  }\n\n  /**\n   * check has any toast\n   * @return boolean\n   */\n  hasToast(): boolean { return this.toasts.length > 0; }\n\n}\n"]}