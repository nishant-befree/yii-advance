{"version":3,"file":"month-view.js","sourceRoot":"","sources":["../../../src/lib/datepicker/month-view.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport { DateLocale } from './date-locale';\nimport { DateUtil } from './date-util';\nimport { Md2CalendarCell } from './calendar-body';\nimport { MD_DATE_FORMATS, MdDateFormats } from '../core/datetime/date-formats';\nimport { slideCalendar } from './datepicker-animations';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'md2-month-view',\n  templateUrl: 'month-view.html',\n  animations: [slideCalendar],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Md2MonthView implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): Date { return this._activeDate; }\n  set activeDate(value: Date) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate = value || this._util.today();\n    if (oldActiveDate && this._activeDate &&\n      !this._util.isSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n      if (this._util.isInNextMonth(oldActiveDate, this._activeDate)) {\n        this.calendarState('right');\n      } else {\n        this.calendarState('left');\n      }\n    }\n  }\n  private _activeDate: Date;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): Date { return this._selected; }\n  set selected(value: Date) {\n    this._selected = value;\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n  }\n  private _selected: Date;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: Date) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() selectedChange = new EventEmitter<Date>();\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: Md2CalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number;\n\n  /** The names of the weekdays. */\n  _weekdays: { long: string, narrow: string }[];\n\n  _calendarState: string;\n\n  constructor(private _locale: DateLocale, public _util: DateUtil,\n    @Optional() @Inject(MD_DATE_FORMATS) private _dateFormats: MdDateFormats) {\n    if (!this._dateFormats) {\n      throw Error('MD_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._locale.getFirstDayOfWeek();\n    const narrowWeekdays = this._locale.getDayOfWeekNames('narrow');\n    const longWeekdays = this._locale.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return { long, narrow: narrowWeekdays[i] };\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._util.today();\n  }\n\n  ngAfterContentInit(): void {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    this.selectedChange.emit(this._util.createDate(\n      this._util.getYear(this.activeDate), this._util.getMonth(this.activeDate),\n      date, this._util.getHours(this.activeDate),\n      this._util.getMinutes(this.activeDate),\n      this._util.getSeconds(this.activeDate)));\n  }\n\n  /** Initializes this month view. */\n  private _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._util.today());\n\n    let firstOfMonth = this._util.createDate(this._util.getYear(this.activeDate),\n      this._util.getMonth(this.activeDate), 1,\n      this._util.getHours(this.activeDate),\n      this._util.getMinutes(this.activeDate),\n      this._util.getSeconds(this.activeDate));\n    this._firstWeekOffset =\n      (DAYS_PER_WEEK + this._locale.getDayOfWeek(firstOfMonth) -\n        this._locale.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n  }\n\n  /** Creates MdCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    let daysInMonth = this._util.getNumDaysInMonth(this.activeDate);\n    let dateNames = this._locale.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++ , cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let date = this._util.createDate(\n        this._util.getYear(this.activeDate),\n        this._util.getMonth(this.activeDate), i + 1,\n        this._util.getHours(this.activeDate),\n        this._util.getMinutes(this.activeDate),\n        this._util.getSeconds(this.activeDate));\n      let enabled = !this.dateFilter ||\n        this.dateFilter(date);\n      let ariaLabel = this._locale.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n        .push(new Md2CalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: Date): number {\n    return this._util.isSameMonthAndYear(date, this.activeDate) ?\n      this._util.getDate(date) : null;\n  }\n\n  private calendarState(direction: string): void {\n    this._calendarState = direction;\n  }\n\n  _calendarStateDone() {\n    this._calendarState = '';\n  }\n\n}\n"]}