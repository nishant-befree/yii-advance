{"version":3,"file":"option.js","sourceRoot":"","sources":["../../../src/lib/select/option.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  Optional,\n  NgModule,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ENTER, SPACE } from '../core/keyboard/keycodes';\nimport { coerceBooleanProperty } from '../core/coercion/boolean-property';\nimport { MdSelectionModule } from '../core/selection/index';\nimport { Md2Optgroup } from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MdOption when selected or deselected. */\nexport class Md2OptionSelectionChange {\n  constructor(public source: Md2Option, public isUserInput = false) { }\n}\n\n\n/**\n * Single option inside of a `<md2-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'md2-option',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.md2-selected]': 'selected',\n    '[class.md2-option-multiple]': 'multiple',\n    '[class.md2-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.md2-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    '[class.md2-option]': 'true',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['option.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class Md2Option {\n  private _selected: boolean = false;\n  private _active: boolean = false;\n\n  /** Whether the option is disabled.  */\n  private _disabled: boolean = false;\n\n  private _id: string = `md2-option-${_uniqueIdCounter++}`;\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  multiple: boolean = false;\n\n  /** The unique ID of the option. */\n  get id() { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() onSelectionChange = new EventEmitter<Md2OptionSelectionChange>();\n\n  constructor(\n    @Optional() public readonly group: Md2Optgroup,\n    private _element: ElementRef) { }\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    return this._getHostElement().textContent.trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    this._active = true;\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    this._active = false;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n    }\n  }\n\n  /**\n   * Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Fetches the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new Md2OptionSelectionChange(this, isUserInput));\n  }\n\n}\n\n@NgModule({\n  imports: [CommonModule, MdSelectionModule],\n  exports: [Md2Option, Md2Optgroup],\n  declarations: [Md2Option, Md2Optgroup]\n})\nexport class Md2OptionModule { }\n"]}