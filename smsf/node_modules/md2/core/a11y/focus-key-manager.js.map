{"version":3,"file":"focus-key-manager.js","sourceRoot":"","sources":["../../../../src/lib/core/a11y/focus-key-manager.ts"],"names":[],"mappings":";;;;;;;;;;AAEA,OAAO,EAAC,cAAc,EAAa,MAAM,oBAAoB,CAAC;AAW9D;IAAqC,mCAAyB;IAE5D,yBAAY,KAA2B;eACrC,kBAAM,KAAK,CAAC;IACd,CAAC;IAED;;;OAGG;IACH,uCAAa,GAAb,UAAc,KAAa;QACzB,iBAAM,aAAa,YAAC,KAAK,CAAC,CAAC;QAE3B,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;QAC1B,CAAC;IACH,CAAC;IAEH,sBAAC;AAAD,CAAC,AAlBD,CAAqC,cAAc,GAkBlD","sourcesContent":["\nimport {QueryList} from '@angular/core';\nimport {ListKeyManager, CanDisable} from './list-key-manager';\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself and whether or not it is currently disabled.\n */\nexport interface Focusable extends CanDisable {\n  focus(): void;\n}\n\n\nexport class FocusKeyManager extends ListKeyManager<Focusable> {\n\n  constructor(items: QueryList<Focusable>) {\n    super(items);\n  }\n\n  /**\n   * This method sets the active item to the item at the specified index.\n   * It also adds focuses the newly active item.\n   */\n  setActiveItem(index: number): void {\n    super.setActiveItem(index);\n\n    if (this.activeItem) {\n      this.activeItem.focus();\n    }\n  }\n\n}\n"]}