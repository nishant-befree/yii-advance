{"version":3,"file":"color.js","sourceRoot":"","sources":["../../../../src/lib/core/common-behaviors/color.ts"],"names":[],"mappings":";;;;;;;;;;AAiBA,4DAA4D;AAC5D,MAAM,qBAAyD,IAAO,EAAE,YAA2B;IAEjG,MAAM;QAAe,2BAAI;QAmBvB;YAAY,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,yBAAc;;YAA1B,+BACW,IAAI,UAId;YAvBO,YAAM,GAAiB,IAAI,CAAC;YAqBlC,8DAA8D;YAC9D,KAAI,CAAC,KAAK,GAAG,YAAY,CAAC;;QAC5B,CAAC;QArBD,sBAAI,0BAAK;iBAAT,cAA4B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;iBACjD,UAAU,KAAmB;gBAC3B,IAAM,YAAY,GAAG,KAAK,IAAI,YAAY,CAAC;gBAE3C,EAAE,CAAC,CAAC,YAAY,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;oBACjC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;wBAChB,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,SAAO,IAAI,CAAC,MAAQ,CAAC,CAAC;oBACnF,CAAC;oBACD,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;wBACjB,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,SAAO,YAAc,CAAC,CAAC;oBACjF,CAAC;oBAED,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC;gBAC7B,CAAC;YACH,CAAC;;;WAdgD;QAsBnD,cAAC;IAAD,CAAC,AAzBM,CAAc,IAAI,GAyBvB;AACJ,CAAC","sourcesContent":["import {Constructor} from './constructor';\nimport {ElementRef, Renderer2} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  color: string;\n}\n\n/** @docs-private */\nexport interface HasRenderer {\n  _renderer: Renderer2;\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values.  */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | null;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasRenderer>>(base: T, defaultColor?: ThemePalette)\n    : Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette = null;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._renderer.removeClass(this._elementRef.nativeElement, `mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._renderer.addClass(this._elementRef.nativeElement, `mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n"]}