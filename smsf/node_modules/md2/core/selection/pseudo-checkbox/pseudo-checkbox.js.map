{"version":3,"file":"pseudo-checkbox.js","sourceRoot":"","sources":["../../../../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EACL,SAAS,EACT,iBAAiB,EACjB,KAAK,EACL,UAAU,EACV,SAAS,GACV,MAAM,eAAe,CAAC;AACvB,OAAO,EAAW,UAAU,EAAC,MAAM,8BAA8B,CAAC;AAKlE,6CAA6C;AAC7C;IACE,8BAAmB,SAAoB,EAAS,WAAuB;QAApD,cAAS,GAAT,SAAS,CAAW;QAAS,gBAAW,GAAX,WAAW,CAAY;IAAG,CAAC;IAC7E,2BAAC;AAAD,CAAC,AAFD,IAEC;;AACD,MAAM,CAAC,IAAM,qBAAqB,GAAG,UAAU,CAAC,oBAAoB,EAAE,QAAQ,CAAC,CAAC;AAGhF;;;;;;;;;;GAUG;AAeH,IAAa,gBAAgB;IAAS,oCAAqB;IAOzD,0BAAY,UAAsB,EAAE,QAAmB;QAAvD,YACE,kBAAM,QAAQ,EAAE,UAAU,CAAC,SAC5B;QARD,qCAAqC;QAC5B,WAAK,GAA0B,WAAW,CAAC;QAEpD,wCAAwC;QAC/B,cAAQ,GAAY,KAAK,CAAC;;IAInC,CAAC;IACH,uBAAC;AAAD,CAAC,AAVD,CAAsC,qBAAqB,GAU1D;AARU;IAAR,KAAK,EAAE;;+CAA4C;AAG3C;IAAR,KAAK,EAAE;;kDAA2B;AALxB,gBAAgB;IAd5B,SAAS,CAAC;QACT,QAAQ,EAAE,MAAM,CAAC,EAAE;QACnB,aAAa,EAAE,iBAAiB,CAAC,IAAI;QACrC,QAAQ,EAAE,yCAAyC;QACnD,SAAS,EAAE,CAAC,qBAAqB,CAAC;QAClC,MAAM,EAAE,CAAC,OAAO,CAAC;QACjB,QAAQ,EAAE,EAAE;QACZ,IAAI,EAAE;YACJ,OAAO,EAAE,qBAAqB;YAC9B,2CAA2C,EAAE,2BAA2B;YACxE,qCAAqC,EAAE,qBAAqB;YAC5D,sCAAsC,EAAE,UAAU;SACnD;KACF,CAAC;qCAQwB,UAAU,EAAY,SAAS;GAP5C,gBAAgB,CAU5B;SAVY,gBAAgB","sourcesContent":["import {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ElementRef,\n  Renderer2,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '../../common-behaviors/color';\n\nexport type MdPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n\n// Boilerplate for applying mixins to MdChip.\nexport class MdPseudoCheckboxBase {\n  constructor(public _renderer: Renderer2, public _elementRef: ElementRef) {}\n}\nexport const _MdPseudoCheckboxBase = mixinColor(MdPseudoCheckboxBase, 'accent');\n\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <md-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  selector: 'md-pseudo-checkbox, mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  inputs: ['color'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MdPseudoCheckbox extends _MdPseudoCheckboxBase implements CanColor {\n  /** Display state of the checkbox. */\n  @Input() state: MdPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(elementRef: ElementRef, renderer: Renderer2) {\n    super(renderer, elementRef);\n  }\n}\n"]}