{"version":3,"file":"compatibility.js","sourceRoot":"","sources":["../../../../src/lib/core/compatibility/compatibility.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,EAAC,QAAQ,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,cAAc,EAAC,MAAM,eAAe,CAAC;AAEhG,MAAM,CAAC,IAAM,2BAA2B,GAAG,IAAI,cAAc,CAAU,uBAAuB,CAAC,CAAC;AAEhG;;;;GAIG;AACH,MAAM,+CAA+C,MAAc,EAAE,QAAgB;IACnF,MAAM,CAAC,KAAK,CAAC,WAAQ,MAAM,qEAAiE;SAC3E,yBAAsB,QAAQ,CAAC,WAAW,EAAE,gBAAY,CAAA,CAAC,CAAC;AAC7E,CAAC;AAED,iGAAiG;AACjG,MAAM,CAAC,IAAM,qBAAqB,GAAG,imCA2DvB,CAAC;AAEf,iGAAiG;AACjG,MAAM,CAAC,IAAM,oBAAoB,GAAG,siCA2DvB,CAAC;AAEd,qEAAqE;AAErE,IAAa,iBAAiB;IAC5B,2BACmD,mBAA4B,EAC7E,UAAsB;QAEtB,EAAE,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;YACzB,MAAM,oCAAoC,CAAC,KAAK,EAAE,UAAU,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACvF,CAAC;IACH,CAAC;IACH,wBAAC;AAAD,CAAC,AATD,IASC;AATY,iBAAiB;IAD7B,SAAS,CAAC,EAAC,QAAQ,EAAE,qBAAqB,EAAC,CAAC;IAGxC,WAAA,QAAQ,EAAE,CAAA,EAAE,WAAA,MAAM,CAAC,2BAA2B,CAAC,CAAA;8CACpC,UAAU;GAHb,iBAAiB,CAS7B;SATY,iBAAiB;AAW9B,oEAAoE;AAEpE,IAAa,gBAAgB;IAC3B,0BACmD,mBAA4B,EAC7E,UAAsB;QAEtB,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;YACxB,MAAM,oCAAoC,CAAC,IAAI,EAAE,UAAU,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACtF,CAAC;IACH,CAAC;IACH,uBAAC;AAAD,CAAC,AATD,IASC;AATY,gBAAgB;IAD5B,SAAS,CAAC,EAAC,QAAQ,EAAE,oBAAoB,EAAC,CAAC;IAGvC,WAAA,QAAQ,EAAE,CAAA,EAAE,WAAA,MAAM,CAAC,2BAA2B,CAAC,CAAA;8CACpC,UAAU;GAHb,gBAAgB,CAS5B;SATY,gBAAgB;AAY7B;;;;GAIG;AAKH,IAAa,mBAAmB;IAAhC;IAAkC,CAAC;IAAD,0BAAC;AAAD,CAAC,AAAnC,IAAmC;AAAtB,mBAAmB;IAJ/B,QAAQ,CAAC;QACR,YAAY,EAAE,CAAC,iBAAiB,EAAE,gBAAgB,CAAC;QACnD,OAAO,EAAE,CAAC,iBAAiB,EAAE,gBAAgB,CAAC;KAC/C,CAAC;GACW,mBAAmB,CAAG;SAAtB,mBAAmB;AAGhC;;;GAGG;AAMH,IAAa,gCAAgC;IAA7C;IAA+C,CAAC;IAAD,uCAAC;AAAD,CAAC,AAAhD,IAAgD;AAAnC,gCAAgC;IAL5C,QAAQ,CAAC;QACR,SAAS,EAAE,CAAC;gBACV,OAAO,EAAE,2BAA2B,EAAE,QAAQ,EAAE,IAAI;aACrD,CAAC;KACH,CAAC;GACW,gCAAgC,CAAG;SAAnC,gCAAgC","sourcesContent":["import {NgModule, Directive, Inject, Optional, ElementRef, InjectionToken} from '@angular/core';\n\nexport const MATERIAL_COMPATIBILITY_MODE = new InjectionToken<boolean>('md-compatibility-mode');\n\n/**\n * Returns an exception to be thrown if the consumer has used\n * an invalid Material prefix on a component.\n * @docs-private\n */\nexport function getMdCompatibilityInvalidPrefixError(prefix: string, nodeName: string) {\n  return Error(`The \"${prefix}-\" prefix cannot be used in ng-material v1 compatibility mode. ` +\n                   `It was used on an \"${nodeName.toLowerCase()}\" element.`);\n}\n\n/** Selector that matches all elements that may have style collisions with AngularJS Material. */\nexport const MAT_ELEMENTS_SELECTOR = `\n  [mat-button],\n  [mat-fab],\n  [mat-icon-button],\n  [mat-mini-fab],\n  [mat-raised-button],\n  [matCardSubtitle],\n  [matCardTitle],\n  [matDialogActions],\n  [matDialogClose],\n  [matDialogContent],\n  [matDialogTitle],\n  [matLine],\n  [matTabLabel],\n  [matTabLink],\n  [matTabNav],\n  [matTooltip],\n  mat-autocomplete,\n  mat-button-toggle,\n  mat-button-toggle,\n  mat-button-toggle-group,\n  mat-card,\n  mat-card-actions,\n  mat-card-content,\n  mat-card-footer,\n  mat-card-header,\n  mat-card-subtitle,\n  mat-card-title,\n  mat-card-title-group,\n  mat-checkbox,\n  mat-chip,\n  mat-dialog-actions,\n  mat-dialog-container,\n  mat-dialog-content,\n  mat-divider,\n  mat-error,\n  mat-grid-list,\n  mat-grid-tile,\n  mat-grid-tile-footer,\n  mat-grid-tile-header,\n  mat-hint,\n  mat-icon,\n  mat-list,\n  mat-list-item,\n  mat-menu,\n  mat-nav-list,\n  mat-option,\n  mat-placeholder,\n  mat-progress-bar,\n  mat-pseudo-checkbox,\n  mat-radio-button,\n  mat-radio-group,\n  mat-select,\n  mat-sidenav,\n  mat-sidenav-container,\n  mat-slider,\n  mat-spinner,\n  mat-tab,\n  mat-tab-group,\n  mat-toolbar`;\n\n/** Selector that matches all elements that may have style collisions with AngularJS Material. */\nexport const MD_ELEMENTS_SELECTOR = `\n  [md-button],\n  [md-fab],\n  [md-icon-button],\n  [md-mini-fab],\n  [md-raised-button],\n  [mdCardSubtitle],\n  [mdCardTitle],\n  [mdDialogActions],\n  [mdDialogClose],\n  [mdDialogContent],\n  [mdDialogTitle],\n  [mdLine],\n  [mdTabLabel],\n  [mdTabLink],\n  [mdTabNav],\n  [mdTooltip],\n  md-autocomplete,\n  md-button-toggle,\n  md-button-toggle,\n  md-button-toggle-group,\n  md-card,\n  md-card-actions,\n  md-card-content,\n  md-card-footer,\n  md-card-header,\n  md-card-subtitle,\n  md-card-title,\n  md-card-title-group,\n  md-checkbox,\n  md-chip,\n  md-dialog-actions,\n  md-dialog-container,\n  md-dialog-content,\n  md-divider,\n  md-error,\n  md-grid-list,\n  md-grid-tile,\n  md-grid-tile-footer,\n  md-grid-tile-header,\n  md-hint,\n  md-icon,\n  md-list,\n  md-list-item,\n  md-menu,\n  md-nav-list,\n  md-option,\n  md-placeholder,\n  md-progress-bar,\n  md-pseudo-checkbox,\n  md-radio-button,\n  md-radio-group,\n  md-select,\n  md-sidenav,\n  md-sidenav-container,\n  md-slider,\n  md-spinner,\n  md-tab,\n  md-tab-group,\n  md-toolbar`;\n\n/** Directive that enforces that the `mat-` prefix cannot be used. */\n@Directive({selector: MAT_ELEMENTS_SELECTOR})\nexport class MatPrefixRejector {\n  constructor(\n    @Optional() @Inject(MATERIAL_COMPATIBILITY_MODE) isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (!isCompatibilityMode) {\n      throw getMdCompatibilityInvalidPrefixError('mat', elementRef.nativeElement.nodeName);\n    }\n  }\n}\n\n/** Directive that enforces that the `md-` prefix cannot be used. */\n@Directive({selector: MD_ELEMENTS_SELECTOR})\nexport class MdPrefixRejector {\n  constructor(\n    @Optional() @Inject(MATERIAL_COMPATIBILITY_MODE) isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (isCompatibilityMode) {\n      throw getMdCompatibilityInvalidPrefixError('md', elementRef.nativeElement.nodeName);\n    }\n  }\n}\n\n\n/**\n * Module that enforces the default compatibility mode settings. When this module is loaded\n * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if\n * there are any uses of the `mat-` prefix.\n */\n@NgModule({\n  declarations: [MatPrefixRejector, MdPrefixRejector],\n  exports: [MatPrefixRejector, MdPrefixRejector],\n})\nexport class CompatibilityModule {}\n\n\n/**\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\n * it will throw an error if there are any uses of the `md-` prefix.\n */\n@NgModule({\n  providers: [{\n    provide: MATERIAL_COMPATIBILITY_MODE, useValue: true,\n  }],\n})\nexport class NoConflictStyleCompatibilityMode {}\n"]}