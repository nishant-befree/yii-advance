{"version":3,"file":"overlay-container.js","sourceRoot":"","sources":["../../../../src/lib/core/overlay/overlay-container.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAC,MAAM,eAAe,CAAC;AAG7D;;;GAGG;AAEH,IAAa,gBAAgB;IAA7B;IA+CA,CAAC;IAvCC,sBAAI,wCAAU;QAHd;;WAEG;aACH,cAA2B,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;aACrD,UAAe,KAAa;YAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBAC3B,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAE1D,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACV,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBAC9C,CAAC;YACH,CAAC;YAED,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QAC3B,CAAC;;;OAXoD;IAarD;;;;;OAKG;IACH,8CAAmB,GAAnB;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAAC,CAAC;QACzD,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAED;;;OAGG;IACO,2CAAgB,GAA1B;QACE,IAAI,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC9C,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;QAEjD,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACrB,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC5C,CAAC;QAED,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACrC,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC;IACrC,CAAC;IACH,uBAAC;AAAD,CAAC,AA/CD,IA+CC;AA/CY,gBAAgB;IAD5B,UAAU,EAAE;GACA,gBAAgB,CA+C5B;SA/CY,gBAAgB;AAiD7B,MAAM,6CAA6C,eAAiC;IAClF,MAAM,CAAC,eAAe,IAAI,IAAI,gBAAgB,EAAE,CAAC;AACnD,CAAC;AAED,MAAM,CAAC,IAAM,0BAA0B,GAAG;IACxC,6FAA6F;IAC7F,OAAO,EAAE,gBAAgB;IACzB,IAAI,EAAE,CAAC,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE,gBAAgB,CAAC,CAAC;IAC1D,UAAU,EAAE,kCAAkC;CAC/C,CAAC","sourcesContent":["import {Injectable, Optional, SkipSelf} from '@angular/core';\n\n\n/**\n * The OverlayContainer is the container in which all overlays will load.\n * It should be provided in the root component to ensure it is properly shared.\n */\n@Injectable()\nexport class OverlayContainer {\n  protected _containerElement: HTMLElement;\n\n  private _themeClass: string;\n\n  /**\n   * Base theme to be applied to all overlay-based components.\n   */\n  get themeClass(): string { return this._themeClass; }\n  set themeClass(value: string) {\n    if (this._containerElement) {\n      this._containerElement.classList.remove(this._themeClass);\n\n      if (value) {\n        this._containerElement.classList.add(value);\n      }\n    }\n\n    this._themeClass = value;\n  }\n\n  /**\n   * This method returns the overlay container element.  It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  protected _createContainer(): void {\n    let container = document.createElement('div');\n    container.classList.add('cdk-overlay-container');\n\n    if (this._themeClass) {\n      container.classList.add(this._themeClass);\n    }\n\n    document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer) {\n  return parentContainer || new OverlayContainer();\n}\n\nexport const OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [[new Optional(), new SkipSelf(), OverlayContainer]],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n"]}