{"version":3,"file":"scroll-strategy-options.js","sourceRoot":"","sources":["../../../../../src/lib/core/overlay/scroll/scroll-strategy-options.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,eAAe,CAAC;AAEzC,OAAO,EAAC,mBAAmB,EAAC,MAAM,yBAAyB,CAAC;AAC5D,OAAO,EAAC,kBAAkB,EAAC,MAAM,wBAAwB,CAAC;AAC1D,OAAO,EAAC,mBAAmB,EAAC,MAAM,yBAAyB,CAAC;AAC5D,OAAO,EAAC,gBAAgB,EAAC,MAAM,qBAAqB,CAAC;AACrD,OAAO,EAAC,aAAa,EAAC,MAAM,4BAA4B,CAAC;AACzD,OAAO,EACL,wBAAwB,GAEzB,MAAM,8BAA8B,CAAC;AAGtC;;;;;GAKG;AAEH,IAAa,qBAAqB;IAChC,+BACU,iBAAmC,EACnC,cAA6B;QAFvC,iBAE4C;QADlC,sBAAiB,GAAjB,iBAAiB,CAAkB;QACnC,mBAAc,GAAd,cAAc,CAAe;QAEvC,4BAA4B;QAC5B,SAAI,GAAG,cAAM,OAAA,IAAI,kBAAkB,EAAE,EAAxB,CAAwB,CAAC;QAEtC,qDAAqD;QACrD,UAAK,GAAG,cAAM,OAAA,IAAI,mBAAmB,CAAC,KAAI,CAAC,iBAAiB,CAAC,EAA/C,CAA+C,CAAC;QAE9D,uBAAuB;QACvB,UAAK,GAAG,cAAM,OAAA,IAAI,mBAAmB,CAAC,KAAI,CAAC,cAAc,CAAC,EAA5C,CAA4C,CAAC;QAE3D;;;;WAIG;QACH,eAAU,GAAG,UAAC,MAAuC;YACjD,OAAA,IAAI,wBAAwB,CAAC,KAAI,CAAC,iBAAiB,EAAE,MAAM,CAAC;QAA5D,CAA4D,CAAA;IAjBrB,CAAC;IAkB9C,4BAAC;AAAD,CAAC,AArBD,IAqBC;AArBY,qBAAqB;IADjC,UAAU,EAAE;qCAGkB,gBAAgB;QACnB,aAAa;GAH5B,qBAAqB,CAqBjC;SArBY,qBAAqB","sourcesContent":["import {Injectable} from '@angular/core';\nimport {ScrollStrategy} from './scroll-strategy';\nimport {CloseScrollStrategy} from './close-scroll-strategy';\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\nimport {BlockScrollStrategy} from './block-scroll-strategy';\nimport {ScrollDispatcher} from './scroll-dispatcher';\nimport {ViewportRuler} from '../position/viewport-ruler';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n} from './reposition-scroll-strategy';\n\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n@Injectable()\nexport class ScrollStrategyOptions {\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler) { }\n\n  /** Do nothing on scroll. */\n  noop = () => new NoopScrollStrategy();\n\n  /** Close the overlay as soon as the user scrolls. */\n  close = () => new CloseScrollStrategy(this._scrollDispatcher);\n\n  /** Block scrolling. */\n  block = () => new BlockScrollStrategy(this._viewportRuler);\n\n  /**\n   * Update the overlay's position on scroll.\n   * @param config Configuration to be used inside the scroll strategy.\n   * Allows debouncing the reposition calls.\n   */\n  reposition = (config?: RepositionScrollStrategyConfig) =>\n      new RepositionScrollStrategy(this._scrollDispatcher, config)\n}\n"]}