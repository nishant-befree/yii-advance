{"version":3,"file":"reposition-scroll-strategy.js","sourceRoot":"","sources":["../../../../../src/lib/core/overlay/scroll/reposition-scroll-strategy.ts"],"names":[],"mappings":"AACA,OAAO,EAAiB,uCAAuC,EAAC,MAAM,mBAAmB,CAAC;AAW1F;;GAEG;AACH;IAIE,kCACU,iBAAmC,EACnC,OAAuC;QADvC,sBAAiB,GAAjB,iBAAiB,CAAkB;QACnC,YAAO,GAAP,OAAO,CAAgC;QALzC,wBAAmB,GAAsB,IAAI,CAAC;IAKD,CAAC;IAEtD,yCAAM,GAAN,UAAO,UAAsB;QAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACrB,MAAM,uCAAuC,EAAE,CAAC;QAClD,CAAC;QAED,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAChC,CAAC;IAED,yCAAM,GAAN;QAAA,iBAQC;QAPC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC;YAC9B,IAAI,QAAQ,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,GAAG,CAAC,CAAC;YAE9D,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,QAAQ,EAAE;gBACnE,KAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;YACpC,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,0CAAO,GAAP;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC;YAC7B,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,CAAC;YACvC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;QAClC,CAAC;IACH,CAAC;IACH,+BAAC;AAAD,CAAC,AAhCD,IAgCC","sourcesContent":["import {Subscription} from 'rxjs/Subscription';\nimport {ScrollStrategy, getMdScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayRef} from '../overlay-ref';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface RepositionScrollStrategyConfig {\n  scrollThrottle?: number;\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription|null = null;\n  private _overlayRef: OverlayRef;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _config: RepositionScrollStrategyConfig) { }\n\n  attach(overlayRef: OverlayRef) {\n    if (this._overlayRef) {\n      throw getMdScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  enable() {\n    if (!this._scrollSubscription) {\n      let throttle = this._config ? this._config.scrollThrottle : 0;\n\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle, () => {\n        this._overlayRef.updatePosition();\n      });\n    }\n  }\n\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n"]}