"use strict";
var Ps = require("perfect-scrollbar");
var core_1 = require("@angular/core");
var core_2 = require("@angular/core");
var core_3 = require("@angular/core");
var perfect_scrollbar_interfaces_1 = require("./perfect-scrollbar.interfaces");
var PerfectScrollbarDirective = (function () {
    function PerfectScrollbarDirective(defaults, zone, elementRef, differs) {
        this.defaults = defaults;
        this.zone = zone;
        this.elementRef = elementRef;
        this.differs = differs;
        this.hidden = false;
        this.disabled = false;
        this.usePSClass = true;
        this.psPosStyle = 'relative';
        this.runInsideAngular = false;
    }
    PerfectScrollbarDirective.prototype.onResize = function ($event) {
        this.update();
    };
    PerfectScrollbarDirective.prototype.ngDoCheck = function () {
        var _this = this;
        if (!this.disabled && this.configDiff) {
            var changes = this.configDiff.diff(this.config || {});
            if (changes) {
                this.ngOnDestroy();
                // Timeout is needed for the styles to update properly
                setTimeout(function () {
                    _this.ngAfterViewInit();
                }, 0);
            }
            else if (this.elementRef.nativeElement) {
                var contentWidth = this.contentWidth;
                var contentHeight = this.contentHeight;
                var width = this.elementRef.nativeElement.offsetWidth;
                var height = this.elementRef.nativeElement.offsetHeight;
                if (this.elementRef.nativeElement.children &&
                    this.elementRef.nativeElement.children.length) {
                    contentWidth = this.elementRef.nativeElement.children[0].offsetWidth;
                    contentHeight = this.elementRef.nativeElement.children[0].offsetHeight;
                }
                if (width !== this.width || height !== this.height ||
                    contentWidth !== this.contentWidth || contentHeight !== this.contentHeight) {
                    this.width = width;
                    this.height = height;
                    this.contentWidth = contentWidth;
                    this.contentHeight = contentHeight;
                    this.update();
                }
            }
        }
    };
    PerfectScrollbarDirective.prototype.ngOnDestroy = function () {
        var _this = this;
        if (this.runInsideAngular) {
            Ps.destroy(this.elementRef.nativeElement);
        }
        else {
            this.zone.runOutsideAngular(function () {
                Ps.destroy(_this.elementRef.nativeElement);
            });
        }
    };
    PerfectScrollbarDirective.prototype.ngOnChanges = function (changes) {
        if (!this.disabled && this.configDiff) {
            if (changes['hidden'] && !this.hidden) {
                this.update();
            }
            if (changes['disabled'] && !this.disabled) {
                this.ngOnDestroy();
            }
        }
    };
    PerfectScrollbarDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (!this.disabled) {
            var config_1 = new perfect_scrollbar_interfaces_1.PerfectScrollbarConfig(this.defaults);
            config_1.assign(this.config);
            if (this.runInsideAngular) {
                Ps.initialize(this.elementRef.nativeElement, config_1);
            }
            else {
                this.zone.runOutsideAngular(function () {
                    Ps.initialize(_this.elementRef.nativeElement, config_1);
                });
            }
            if (!this.configDiff) {
                this.configDiff = this.differs.find(this.config || {}).create(null);
            }
        }
    };
    PerfectScrollbarDirective.prototype.update = function () {
        var _this = this;
        setTimeout(function () {
            if (!_this.disabled) {
                if (_this.runInsideAngular) {
                    Ps.update(_this.elementRef.nativeElement);
                }
                else {
                    _this.zone.runOutsideAngular(function () {
                        Ps.update(_this.elementRef.nativeElement);
                    });
                }
            }
        }, 0);
    };
    PerfectScrollbarDirective.prototype.geometry = function (property) {
        if (property === void 0) { property = 'scroll'; }
        return {
            x: this.elementRef.nativeElement[property + 'Left'],
            y: this.elementRef.nativeElement[property + 'Top'],
            w: this.elementRef.nativeElement[property + 'Width'],
            h: this.elementRef.nativeElement[property + 'Height']
        };
    };
    PerfectScrollbarDirective.prototype.scrollTo = function (x, y, speed) {
        if (!this.disabled) {
            if (y == null && speed == null) {
                console.warn('Deprecated use of scrollTo, use the scrollToY function instead!');
                this.animateScrolling('scrollTop', x, speed);
            }
            else {
                if (x != null) {
                    this.animateScrolling('scrollLeft', x, speed);
                }
                if (y != null) {
                    this.animateScrolling('scrollTop', y, speed);
                }
            }
        }
    };
    PerfectScrollbarDirective.prototype.scrollToX = function (x, speed) {
        this.animateScrolling('scrollLeft', x, speed);
    };
    PerfectScrollbarDirective.prototype.scrollToY = function (y, speed) {
        this.animateScrolling('scrollTop', y, speed);
    };
    PerfectScrollbarDirective.prototype.scrollToTop = function (offset, speed) {
        this.animateScrolling('scrollTop', (offset || 0), speed);
    };
    PerfectScrollbarDirective.prototype.scrollToLeft = function (offset, speed) {
        this.animateScrolling('scrollLeft', (offset || 0), speed);
    };
    PerfectScrollbarDirective.prototype.scrollToRight = function (offset, speed) {
        var width = this.elementRef.nativeElement.scrollWidth;
        this.animateScrolling('scrollLeft', width - (offset || 0), speed);
    };
    PerfectScrollbarDirective.prototype.scrollToBottom = function (offset, speed) {
        var height = this.elementRef.nativeElement.scrollHeight;
        this.animateScrolling('scrollTop', height - (offset || 0), speed);
    };
    PerfectScrollbarDirective.prototype.animateScrolling = function (target, value, speed) {
        var _this = this;
        if (!speed) {
            this.elementRef.nativeElement[target] = value;
            // PS has weird event sending order, this is a workaround for that
            this.update();
            this.update();
        }
        else if (value !== this.elementRef.nativeElement[target]) {
            var newValue_1 = 0;
            var scrollCount_1 = 0;
            var oldTimestamp_1 = performance.now();
            var oldValue_1 = this.elementRef.nativeElement[target];
            var cosParameter_1 = (oldValue_1 - value) / 2;
            var step_1 = function (newTimestamp) {
                scrollCount_1 += Math.PI / (speed / (newTimestamp - oldTimestamp_1));
                newValue_1 = Math.round(value + cosParameter_1 + cosParameter_1 * Math.cos(scrollCount_1));
                // Only continue animation if scroll position has not changed
                if (_this.elementRef.nativeElement[target] === oldValue_1) {
                    if (scrollCount_1 >= Math.PI) {
                        _this.elementRef.nativeElement[target] = value;
                        // PS has weird event sending order, this is a workaround for that
                        _this.update();
                        _this.update();
                    }
                    else {
                        _this.elementRef.nativeElement[target] = oldValue_1 = newValue_1;
                        oldTimestamp_1 = newTimestamp;
                        window.requestAnimationFrame(step_1);
                    }
                }
            };
            window.requestAnimationFrame(step_1);
        }
    };
    return PerfectScrollbarDirective;
}());
PerfectScrollbarDirective.decorators = [
    { type: core_1.Directive, args: [{
                selector: '[perfect-scrollbar]',
                exportAs: 'ngxPerfectScrollbar'
            },] },
];
/** @nocollapse */
PerfectScrollbarDirective.ctorParameters = function () { return [
    { type: perfect_scrollbar_interfaces_1.PerfectScrollbarConfig, decorators: [{ type: core_1.Optional },] },
    { type: core_1.NgZone, },
    { type: core_3.ElementRef, },
    { type: core_2.KeyValueDiffers, },
]; };
PerfectScrollbarDirective.propDecorators = {
    'hidden': [{ type: core_3.HostBinding, args: ['hidden',] }, { type: core_3.Input },],
    'disabled': [{ type: core_3.Input },],
    'usePSClass': [{ type: core_3.HostBinding, args: ['class.ps',] }, { type: core_3.Input },],
    'psPosStyle': [{ type: core_3.HostBinding, args: ['style.position',] }, { type: core_3.Input },],
    'runInsideAngular': [{ type: core_3.Input },],
    'config': [{ type: core_3.Input, args: ['perfect-scrollbar',] },],
    'onResize': [{ type: core_3.HostListener, args: ['window:resize', ['$event'],] },],
};
exports.PerfectScrollbarDirective = PerfectScrollbarDirective;
//# sourceMappingURL=perfect-scrollbar.directive.js.map